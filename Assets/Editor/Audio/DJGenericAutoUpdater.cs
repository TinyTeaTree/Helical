using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace Services.Editor
{
	public static class DJGenericAutoUpdater
	{
		private const string AutoFilePath = "Assets/Scripts/Services/SoundPlayer/DJ.Generic.auto.cs";

		[MenuItem("Custom/Update DJ Generic Sounds")]
		public static void UpdateFile()
		{
			var collection = Resources.Load<GenericSoundCollectionSO>(Addresses.GenericSoundCollection);
			if (collection == null)
			{
				// If no collection, still write stub to avoid compile errors
				WriteAutoFile(System.Array.Empty<(string propName, string key)>());
				return;
			}

			var sounds = collection.Sounds;
			var pairs = new System.Collections.Generic.List<(string propName, string key)>();
			var used = new System.Collections.Generic.HashSet<string>();
			for (int i = 0; i < sounds.Count; i++)
			{
				var s = sounds[i];
				if (s == null || string.IsNullOrEmpty(s.name))
					continue;
				var originalName = s.name;
				var prop = SanitizeToIdentifier(originalName);
				if (string.IsNullOrEmpty(prop))
					continue;
				var baseName = prop;
				int suffix = 1;
				while (used.Contains(prop))
				{
					prop = baseName + (++suffix).ToString();
				}
				var finalProp = prop + "_Sound";
				while (used.Contains(finalProp))
				{
					finalProp = prop + (++suffix).ToString() + "_Sound";
				}
				used.Add(finalProp);
				pairs.Add((finalProp, originalName));
			}

			WriteAutoFile(pairs.ToArray());
		}

		private static void WriteAutoFile((string propName, string key)[] names)
		{
			var directory = Path.GetDirectoryName(AutoFilePath);
			if (!Directory.Exists(directory))
			{
				Directory.CreateDirectory(directory);
			}

			using (var writer = new StreamWriter(AutoFilePath, false))
			{
				writer.WriteLine("// <auto-generated>");
				writer.WriteLine("// This file is generated from the Generic Sound Collection in Resources.");
				writer.WriteLine("// Any changes will be overwritten by the editor updater.");
				writer.WriteLine("// </auto-generated>");
				writer.WriteLine();
				writer.WriteLine("namespace Services");
				writer.WriteLine("{");
				writer.WriteLine("\tpublic static partial class DJ");
				writer.WriteLine("\t{");
				foreach (var n in names)
				{
					writer.WriteLine($"\t\tpublic static IDesignSound {n.propName} => GenericCollection != null ? GenericCollection.Get(\"{n.key}\") : null;");
				}
				writer.WriteLine("\t}");
				writer.WriteLine("}");
			}

			AssetDatabase.ImportAsset(AutoFilePath);
		}

		private static string SanitizeToIdentifier(string raw)
		{
			if (string.IsNullOrEmpty(raw))
				return null;
			var sb = new System.Text.StringBuilder(raw.Length);
			// First char: must be letter or underscore
			char c0 = raw[0];
			if ((c0 >= 'A' && c0 <= 'Z') || (c0 >= 'a' && c0 <= 'z') || c0 == '_')
				sb.Append(c0);
			else
				sb.Append('_');
			for (int i = 1; i < raw.Length; i++)
			{
				char c = raw[i];
				if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || c == '_')
					sb.Append(c);
				else if (char.IsWhiteSpace(c) || c == '-' || c == '.')
					sb.Append('_');
				// else skip invalid symbol
			}
			return sb.ToString();
		}
	}
}

